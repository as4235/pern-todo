{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ajkum\\\\Desktop\\\\pern\\\\client\\\\src\\\\components\\\\EditTodo.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EditTodo = ({\n  todo\n}) => {\n  _s();\n\n  //{todo} is used cux, we passed this value through the edit button and we are getting it here.\n  // description has the previous todo value, setDescription has the updated todo value. We're setting their tates.\n  const [description, setDescription] = useState(todo.description);\n\n  const editText = async id => {\n    try {\n      const body = {\n        description\n      };\n      const res = await fetch(`http://localhost:5000/todos/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      console.log(res);\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      className: \"btn btn-warning\",\n      \"data-toggle\": \"modal\",\n      \"data-target\": `#id${todo.todo_id}`,\n      children: [\" \", \"Edit\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      id: `id${todo.todo_id}`,\n      children: [\"  \", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"modal-title\",\n              children: \"Edit Todo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"close\",\n              \"data-dismiss\": \"modal\",\n              children: \"\\xD7\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              value: description\n              /* 'description' is declared in the useState */\n              ,\n              onChange: e => setDescription(e.target.value)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 25\n            }, this), \" \"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-warning\",\n              \"data-dismiss\": \"modal\",\n              onClick: () => editText(todo.todo_id),\n              children: \"Edit\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-danger\",\n              \"data-dismiss\": \"modal\",\n              children: \"Close\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n\n_s(EditTodo, \"8+7bLWetC2qBum+Uv3xZAs90PS0=\");\n\n_c = EditTodo;\nexport default EditTodo;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditTodo\");","map":{"version":3,"sources":["C:/Users/ajkum/Desktop/pern/client/src/components/EditTodo.js"],"names":["React","Fragment","useState","EditTodo","todo","description","setDescription","editText","id","body","res","fetch","method","headers","JSON","stringify","console","log","error","message","todo_id","e","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAyBC,QAAzB,QAAwC,OAAxC;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAY;AAAA;;AAAI;AACzB;AAEJ,QAAK,CAACC,WAAD,EAAcC,cAAd,IAA+BJ,QAAQ,CAACE,IAAI,CAACC,WAAN,CAA5C;;AAEA,QAAME,QAAQ,GAAG,MAAOC,EAAP,IAAc;AAC3B,QAAI;AACA,YAAMC,IAAI,GAAG;AAAEJ,QAAAA;AAAF,OAAb;AACA,YAAMK,GAAG,GAAG,MAAMC,KAAK,CAAE,+BAA8BH,EAAG,EAAnC,EAAqC;AACxDI,QAAAA,MAAM,EAAE,KADgD;AAExDC,QAAAA,OAAO,EAAE;AAAE,0BAAgB;AAAlB,SAF+C;AAGxDJ,QAAAA,IAAI,EAAEK,IAAI,CAACC,SAAL,CAAeN,IAAf;AAHkD,OAArC,CAAvB;AAKAO,MAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH,KARD,CAQE,OAAOQ,KAAP,EAAc;AACZF,MAAAA,OAAO,CAACE,KAAR,CAAcA,KAAK,CAACC,OAApB;AACH;AACJ,GAZD;;AAcA,sBACI,QAAC,QAAD;AAAA,4BACI;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,SAAS,EAAC,iBAAhC;AAAkD,qBAAY,OAA9D;AAAsE,qBAAc,MAAKf,IAAI,CAACgB,OAAQ,EAAtG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAKI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAuB,MAAA,EAAE,EAAG,KAAIhB,IAAI,CAACgB,OAAQ,EAA7C;AAAA,oCACI;AAAK,QAAA,SAAS,EAAC,cAAf;AAAA,+BACI;AAAK,UAAA,SAAS,EAAC,eAAf;AAAA,kCAEA;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,oCACI;AAAI,cAAA,SAAS,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,SAAS,EAAC,OAAhC;AAAwC,8BAAa,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFA,eAOA;AAAK,YAAA,SAAS,EAAC,YAAf;AAAA,oCACI;AAAO,cAAA,IAAI,EAAC,MAAZ;AAAmB,cAAA,SAAS,EAAC,cAA7B;AAA4C,cAAA,KAAK,EAAEf;AAAa;AAAhE;AACA,cAAA,QAAQ,EAAEgB,CAAC,IAAIf,cAAc,CAACe,CAAC,CAACC,MAAF,CAASC,KAAV;AAD7B;AAAA;AAAA;AAAA;AAAA,oBADJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAPA,eAYA;AAAK,YAAA,SAAS,EAAC,cAAf;AAAA,oCAEI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,SAAS,EAAC,iBAAhC;AACA,8BAAa,OADb;AACqB,cAAA,OAAO,EAAE,MAAMhB,QAAQ,CAACH,IAAI,CAACgB,OAAN,CAD5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAKI;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,SAAS,EAAC,gBAAhC;AAAiD,8BAAa,OAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAZA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ;AAAA;AAAA;AAAA;AAAA;AAAA,YALJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH,CApDD;;GAAMjB,Q;;KAAAA,Q;AAsDN,eAAeA,QAAf","sourcesContent":["import React, {Fragment, useState} from 'react';\r\n\r\nconst EditTodo = ({todo}) => {   //{todo} is used cux, we passed this value through the edit button and we are getting it here.\r\n        // description has the previous todo value, setDescription has the updated todo value. We're setting their tates.\r\n    \r\n    const[description, setDescription] =useState(todo.description);\r\n\r\n    const editText = async (id) => {\r\n        try {\r\n            const body = { description };\r\n            const res = await fetch(`http://localhost:5000/todos/${id}`,{\r\n                method: \"PUT\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify(body)\r\n            });\r\n            console.log(res);\r\n        } catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    }\r\n\r\n    return(\r\n        <Fragment>\r\n            <button type=\"button\" className=\"btn btn-warning\" data-toggle=\"modal\" data-target={`#id${todo.todo_id}`}> {/* we are getting all the description in the todo, so we are metioning the todo_id here to get the particular todo */}\r\n            Edit\r\n            </button>\r\n\r\n            <div className=\"modal\" id={`id${todo.todo_id}`}>  {/* we are getting all the description in the todo, so we are metioning the todo_id here to get the particular todo */}\r\n                <div className=\"modal-dialog\">\r\n                    <div className=\"modal-content\">\r\n\r\n                    <div className=\"modal-header\">\r\n                        <h4 className=\"modal-title\">Edit Todo</h4>\r\n                        <button type=\"button\" className=\"close\" data-dismiss=\"modal\">&times;</button>\r\n                    </div>\r\n\r\n                    <div className=\"modal-body\">\r\n                        <input type=\"text\" className=\"form-control\" value={description} /* 'description' is declared in the useState */\r\n                        onChange={e => setDescription(e.target.value)}/> {/* on change of the 'value', get the target new 'value' and pass it to setDescription variable we declared in the useState. */}\r\n                    </div>\r\n\r\n                    <div className=\"modal-footer\">\r\n                        \r\n                        <button type=\"button\" className=\"btn btn-warning\" \r\n                        data-dismiss=\"modal\" onClick={() => editText(todo.todo_id)} >Edit</button>\r\n\r\n                        <button type=\"button\" className=\"btn btn-danger\" data-dismiss=\"modal\">Close</button>\r\n                    </div>\r\n\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default EditTodo;"]},"metadata":{},"sourceType":"module"}