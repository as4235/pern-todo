{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ajkum\\\\Desktop\\\\pern\\\\client\\\\src\\\\components\\\\ListTodos.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useState, useEffect } from 'react';\nimport EditTodo from \"./EditTodo\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ListTodos = () => {\n  _s();\n\n  const [todos, setTodos] = useState([]); // empty array because we're getting list of data\n  // todos is current state, which is empty. so the page rrenders zero rows. settodos is the state after rendering. So after page renders, the value from the 'res.json' is obatined and updated in the table\n\n  async function deleteTodo(id) {\n    try {\n      await fetch(`http://localhost:5000/todos/${id}`, {\n        method: \"DELETE\"\n      });\n      setTodos(todos.filter(todo => todo.todo_id !== id));\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  async function getTodos() {\n    const res = await fetch(\"http://localhost:5000/todos\");\n    const todoArray = await res.json(); // like we use req.body, but here we are getting response and in the form of json\n\n    setTodos(todoArray); // useState sets the state. Here the values from todoArray is set to a state called 'setTodos'\n  }\n\n  useEffect(() => {\n    // useEffect is like ngOnInIt. runs automatically everytime the page loads.\n    getTodos(); // useEffect runs the function getTodos and passes the values. There isn't one value so '[]' empty\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [\"  \", /*#__PURE__*/_jsxDEV(\"table\", {\n      className: \"table mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: todos.map(todo =>\n        /*#__PURE__*/\n        // for of method. 'for todo of todos'. we are getting all the value and mentoning here which column to use\n        _jsxDEV(\"tr\", {\n          children: [\"  \", /*#__PURE__*/_jsxDEV(\"td\", {\n            children: todo.description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(EditTodo, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 49,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-danger\",\n              onClick: () => deleteTodo(todo.todo_id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 29\n          }, this)]\n        }, todo.todo_id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 9\n  }, this);\n};\n\n_s(ListTodos, \"4w2FR3x+JAhc2MKl4V8naiLXs70=\");\n\n_c = ListTodos;\nexport default ListTodos;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListTodos\");","map":{"version":3,"sources":["C:/Users/ajkum/Desktop/pern/client/src/components/ListTodos.js"],"names":["React","Fragment","useState","useEffect","EditTodo","ListTodos","todos","setTodos","deleteTodo","id","fetch","method","filter","todo","todo_id","error","console","message","getTodos","res","todoArray","json","map","description"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,QAA1B,EAAoCC,SAApC,QAAqD,OAArD;AACA,OAAOC,QAAP,MAAqB,YAArB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEpB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAC,EAAD,CAAlC,CAFoB,CAEqB;AACzC;;AAEA,iBAAeM,UAAf,CAA0BC,EAA1B,EAA8B;AAC1B,QAAI;AACA,YAAMC,KAAK,CAAE,+BAA8BD,EAAG,EAAnC,EAAsC;AAC7CE,QAAAA,MAAM,EAAE;AADqC,OAAtC,CAAX;AAGAJ,MAAAA,QAAQ,CAACD,KAAK,CAACM,MAAN,CAAaC,IAAI,IAAIA,IAAI,CAACC,OAAL,KAAiBL,EAAtC,CAAD,CAAR;AAEH,KAND,CAME,OAAOM,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACH;AACJ;;AAED,iBAAeC,QAAf,GAA0B;AACtB,UAAMC,GAAG,GAAG,MAAMT,KAAK,CAAC,6BAAD,CAAvB;AAEA,UAAMU,SAAS,GAAG,MAAMD,GAAG,CAACE,IAAJ,EAAxB,CAHsB,CAGgB;;AAEtCd,IAAAA,QAAQ,CAACa,SAAD,CAAR,CALsB,CAKE;AAC3B;;AAEDjB,EAAAA,SAAS,CAAC,MAAM;AAAU;AACtBe,IAAAA,QAAQ,GADI,CACU;AACzB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI,QAAC,QAAD;AAAA,eACK,IADL,eAEI;AAAO,MAAA,SAAS,EAAC,YAAjB;AAAA,8BACI;AAAA,+BACI;AAAA,kCACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAQI;AAAA,kBAEKZ,KAAK,CAACgB,GAAN,CAAUT,IAAI;AAAA;AAAO;AAClB;AAAA,wCACI;AAAA,sBAAKA,IAAI,CAACU;AAAV;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAA,mCAAI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI;AAAA,mCAAI;AAAQ,cAAA,SAAS,EAAC,gBAAlB;AAAmC,cAAA,OAAO,EAAE,MAAMf,UAAU,CAACK,IAAI,CAACC,OAAN,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAJ;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA,WAASD,IAAI,CAACC,OAAd;AAAA;AAAA;AAAA;AAAA,gBADH;AAFL;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAyBH,CAtDD;;GAAMT,S;;KAAAA,S;AAwDN,eAAeA,SAAf","sourcesContent":["import React, { Fragment, useState, useEffect } from 'react';\r\nimport EditTodo from \"./EditTodo\";  \r\n\r\nconst ListTodos = () => {\r\n    \r\n    const [todos, setTodos] = useState([]);  // empty array because we're getting list of data\r\n    // todos is current state, which is empty. so the page rrenders zero rows. settodos is the state after rendering. So after page renders, the value from the 'res.json' is obatined and updated in the table\r\n    \r\n    async function deleteTodo(id) {\r\n        try {\r\n            await fetch(`http://localhost:5000/todos/${id}`, {\r\n                method: \"DELETE\"\r\n            });\r\n            setTodos(todos.filter(todo => todo.todo_id !== id));\r\n\r\n        } catch (error) {\r\n            console.error(error.message);\r\n        }\r\n    }\r\n\r\n    async function getTodos() {\r\n        const res = await fetch(\"http://localhost:5000/todos\");\r\n\r\n        const todoArray = await res.json();   // like we use req.body, but here we are getting response and in the form of json\r\n        \r\n        setTodos(todoArray);    // useState sets the state. Here the values from todoArray is set to a state called 'setTodos'\r\n    }\r\n\r\n    useEffect(() => {         // useEffect is like ngOnInIt. runs automatically everytime the page loads.\r\n        getTodos();           // useEffect runs the function getTodos and passes the values. There isn't one value so '[]' empty\r\n    }, []);\r\n\r\n    return (\r\n        <Fragment>\r\n            {\"  \"}\r\n            <table className=\"table mt-5\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>Description</th>\r\n                        <th>Edit</th>\r\n                        <th>Delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    \r\n                    {todos.map(todo => (  // for of method. 'for todo of todos'. we are getting all the value and mentoning here which column to use\r\n                        <tr key={todo.todo_id}>  {/* to uniquely identify each rows */}               \r\n                            <td>{todo.description}</td> \r\n                            <td><EditTodo /></td>\r\n                            <td><button className=\"btn btn-danger\" onClick={() => deleteTodo(todo.todo_id)}>Delete</button></td>\r\n                        </tr>\r\n                    ))}\r\n                    \r\n                </tbody>\r\n            </table>\r\n        </Fragment>\r\n    );\r\n};\r\n\r\nexport default ListTodos;"]},"metadata":{},"sourceType":"module"}